// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Ticket.Persistance.Context;

#nullable disable

namespace Ticket.Persistance.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20241026120201_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("BusTravelServiceProviderBus", b =>
                {
                    b.Property<long>("BusTravelsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceProvidersId")
                        .HasColumnType("bigint");

                    b.HasKey("BusTravelsId", "ServiceProvidersId");

                    b.HasIndex("ServiceProvidersId");

                    b.ToTable("BusTravelServiceProviderBus");
                });

            modelBuilder.Entity("FlightServiceProviderAirPlane", b =>
                {
                    b.Property<long>("FlightsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceProvidersId")
                        .HasColumnType("bigint");

                    b.HasKey("FlightsId", "ServiceProvidersId");

                    b.HasIndex("ServiceProvidersId");

                    b.ToTable("FlightServiceProviderAirPlane");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ServiceProviderTrainTrainTravel", b =>
                {
                    b.Property<long>("BusTravelsId")
                        .HasColumnType("bigint");

                    b.Property<long>("ServiceProvidersId")
                        .HasColumnType("bigint");

                    b.HasKey("BusTravelsId", "ServiceProvidersId");

                    b.HasIndex("ServiceProvidersId");

                    b.ToTable("ServiceProviderTrainTrainTravel");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CountryId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId1")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId1");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.Image", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AirPlaneId")
                        .HasColumnType("bigint");

                    b.Property<int?>("BusId")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("TrainId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AirPlaneId");

                    b.HasIndex("BusId");

                    b.HasIndex("TrainId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.Pricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AdultPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ChildPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TeenagePrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("Pricing");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.CartNumbers", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("UserId");

                    b.ToTable("CartNumbers");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Discount.Discount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DiscountCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Important")
                        .HasColumnType("int");

                    b.Property<bool>("IsDoubleDiscount")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPrecent")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MaxDiscount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("MaxUse")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("RefrenceId")
                        .HasColumnType("bigint");

                    b.Property<int?>("RefrenceTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("RefrenceTypeID");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Discount.UsedDiscount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("DiscountId")
                        .HasColumnType("bigint");

                    b.Property<long>("FK_UsedDiscounts_Transactions_NoCacade")
                        .HasColumnType("bigint");

                    b.Property<decimal>("GetDiscountCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("RefrenceId")
                        .HasColumnType("bigint");

                    b.Property<int>("RefrenceTypeID")
                        .HasColumnType("int");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("DiscountId");

                    b.HasIndex("FK_UsedDiscounts_Transactions_NoCacade");

                    b.HasIndex("RefrenceTypeID");

                    b.HasIndex("UserId");

                    b.ToTable("UsedDiscounts");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Transaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsFinished")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("PaidDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("RefrenceID")
                        .HasColumnType("bigint");

                    b.Property<int>("RefrenceTypeID")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TrackingCodeBank")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RefrenceTypeID");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Wallet", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId1")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("UserId1");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.References.CompanyServiceProviders", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Site")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UrlImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("CompanyServiceProviders");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Bus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("BusTypeId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("NumberPlates")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BusTypeId");

                    b.ToTable("Buses");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.BusTerminal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("BusTerminals");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.BusTravel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AllowableAmountLoad")
                        .HasColumnType("int");

                    b.Property<int>("BusId")
                        .HasColumnType("int");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<long>("DestinationTerminalId")
                        .HasColumnType("bigint");

                    b.Property<long>("FK_BusTravels_BusTerminals_DestinationTerminalId")
                        .HasColumnType("bigint");

                    b.Property<long>("FK_BusTravels_BusTerminals_OriginTerminalId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("OriginTerminalId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmallTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartMoving")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BusId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FK_BusTravels_BusTerminals_DestinationTerminalId");

                    b.HasIndex("FK_BusTravels_BusTerminals_OriginTerminalId");

                    b.ToTable("BusTravels");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.BusTravelCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusTravelCompanies");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.BusType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AllowableAmountLoad")
                        .HasColumnType("int");

                    b.Property<int>("MaxNumberPassenger")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SeatArrangement")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("BusTypes");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.ServiceProviderBus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeServiceId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeServiceId1")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PersonId");

                    b.HasIndex("TypeServiceId1");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceProviderBuses");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Ticket.TicketBus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("NationalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("PassengerId")
                        .HasColumnType("bigint");

                    b.Property<long>("ReservationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReturnedId")
                        .HasColumnType("bigint");

                    b.Property<int>("SeatNumber")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PassengerId");

                    b.HasIndex("ReservationId");

                    b.HasIndex("ReturnedId");

                    b.ToTable("TicketBuses");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Ticket.TicketBusReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BusTravelId")
                        .HasColumnType("bigint");

                    b.Property<long>("FK_TicketBusReservations_Passengers_SupervisorId")
                        .HasColumnType("bigint");

                    b.Property<long>("FK_TicketBusReservations_Transactions_TransactionId")
                        .HasColumnType("bigint");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendOtherInformationToEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendOtherInformationToPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SupervisorId")
                        .HasColumnType("bigint");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BusTravelId");

                    b.HasIndex("FK_TicketBusReservations_Passengers_SupervisorId");

                    b.HasIndex("FK_TicketBusReservations_Transactions_TransactionId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketBusReservations");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Ticket.TicketBusReturned", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ReasonForReturned")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TicketBusReturneds");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.TypeServiceProviderBus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeServiceProviderBuses");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AirLineCompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasAlternateKey("Code");

                    b.HasIndex("AirLineCompanyId");

                    b.ToTable("AirLines");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirLineCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasMaxLength(400)
                        .HasColumnType("nvarchar(400)");

                    b.HasKey("Id");

                    b.HasIndex("Name");

                    b.ToTable("AirLineCompanies");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirLineContants", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int>("AirLineId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("WebSite")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.HasIndex("AirLineId")
                        .IsUnique();

                    b.ToTable("AirLineContants");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirLineFinancial", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AirLineId")
                        .HasColumnType("int");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint");

                    b.Property<string>("EnConomicCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SalesReportLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShabaNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AirLineId")
                        .IsUnique();

                    b.HasIndex("BankId");

                    b.ToTable("AirLineFinancials");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirPlane", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("AirPlaneTypeId")
                        .HasColumnType("smallint");

                    b.Property<int>("AllowableAmountLoad")
                        .HasColumnType("int");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberPassenger")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<short>("Rank")
                        .HasColumnType("smallint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AirPlaneTypeId");

                    b.ToTable("AirPlanes");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirPlaneType", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<short>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("AirPlaneTypes");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirplaneTerminal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("AirplaneTerminals");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.DomesticFlight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("DomesticFlights");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.TicketDomesticFlight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FK_TicketDomesticFlights_TicketDomesticFlightReservations_ReservationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("PassengerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("ReservationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("ReturnedId")
                        .HasColumnType("bigint");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComputedColumnSql("'DF-'+ CONVERT(NVARCHAR(4),YEAR(GETDATE()))+'-'+CONVERT(NVARCHAR(4),MONTH(GETDATE()))+'-'+CONVERT(NVARCHAR(4),DAY(GETDATE()))+'-'+[Id]");

                    b.HasKey("Id");

                    b.HasAlternateKey("PassengerId", "ReservationId");

                    b.HasIndex("FK_TicketDomesticFlights_TicketDomesticFlightReservations_ReservationId");

                    b.HasIndex("ReturnedId");

                    b.ToTable("TicketDomesticFlights");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.TicketDomesticFlightReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("FK_TicketDomesticFlightReservation_Transactions_TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SendOtherInformationToEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendOtherInformationToPhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long?>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FK_TicketDomesticFlightReservation_Transactions_TransactionId");

                    b.HasIndex("FlightId");

                    b.HasIndex("OrderNumber")
                        .IsUnique()
                        .HasFilter("[OrderNumber] IS NOT NULL");

                    b.HasIndex("TicketNumber")
                        .IsUnique()
                        .HasFilter("[TicketNumber] IS NOT NULL");

                    b.HasIndex("UserId");

                    b.ToTable("TicketDomesticFlightReservations");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.TicketDomesticFlightReturned", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ReasonForReturned")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TicketDomesticFlightReturneds");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.Flight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AirLineId")
                        .HasColumnType("bigint");

                    b.Property<int>("AirLineId1")
                        .HasColumnType("int");

                    b.Property<long>("AirPlaneId")
                        .HasColumnType("bigint");

                    b.Property<int>("AllowableAmountLoad")
                        .HasColumnType("int");

                    b.Property<long>("ClassId")
                        .HasColumnType("bigint");

                    b.Property<int>("ClassId1")
                        .HasColumnType("int");

                    b.Property<long>("CompanyId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<long>("DestinationTerminalId")
                        .HasColumnType("bigint");

                    b.Property<long?>("DiscountId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("EndMoving")
                        .HasColumnType("datetime2");

                    b.Property<long>("FK_Flights_AirplaneTerminals_DestinationTerminalId")
                        .HasColumnType("bigint");

                    b.Property<long>("FK_Flights_AirplaneTerminals_OriginTerminalId")
                        .HasColumnType("bigint");

                    b.Property<string>("FlightNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("IsCharter")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("MaxNumberPassenger")
                        .HasMaxLength(1000)
                        .HasColumnType("int");

                    b.Property<long>("OriginTerminalId")
                        .HasColumnType("bigint");

                    b.Property<long>("PricingId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmallTitle")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("StartMoving")
                        .HasColumnType("datetime2");

                    b.Property<long>("TicketRefundRulesId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("AirLineId1");

                    b.HasIndex("AirPlaneId");

                    b.HasIndex("ClassId1");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DiscountId");

                    b.HasIndex("FK_Flights_AirplaneTerminals_DestinationTerminalId");

                    b.HasIndex("FK_Flights_AirplaneTerminals_OriginTerminalId");

                    b.HasIndex("PricingId");

                    b.HasIndex("TicketRefundRulesId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.FlightClass", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClassTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShortName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ClassTypeId");

                    b.ToTable("FlightClass");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.FlightClassType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("Id");

                    b.ToTable("FlightClassType");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.FlightCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FlightCompanies");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.FlightTag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("FlightTags");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.FlightTicketRefundRules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DeductibleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("EndHour")
                        .HasColumnType("smallint");

                    b.Property<TimeSpan?>("End_AfterIssuanceTicket")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("End_BeforeFlight")
                        .HasColumnType("time");

                    b.Property<long>("GroupRulesId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPercent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<short?>("StartHour")
                        .HasColumnType("smallint");

                    b.Property<TimeSpan?>("Start_AfterIssuanceTicket")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("Start_BeforeFlight")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupRulesId");

                    b.ToTable("FlightTicketRefundRules");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.GroupFlightTicketRefundRules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupFlightTicketRefundRules");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.InternationalFlight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FlightId");

                    b.ToTable("InternationalFlights");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.TicketInternationalFlight", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FK_TicketInternationalFlights_TicketInternationalFlightReservations_ReservationId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("PassengerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ReturnedId")
                        .HasColumnType("bigint");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FK_TicketInternationalFlights_TicketInternationalFlightReservations_ReservationId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("ReturnedId");

                    b.ToTable("TicketInternationalFlights");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.TicketInternationalFlightReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FK_TicketInternationalFlightReservation_Transactions_TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("FlightId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SendOtherInformationToEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendOtherInformationToPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FK_TicketInternationalFlightReservation_Transactions_TransactionId");

                    b.HasIndex("FlightId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketInternationalFlightReservations");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.TicketInternationalFlightReturned", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ReasonForReturned")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TicketInternationalFlightReturneds");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.ServiceProviderAirPlane", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TypeServiceId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeServiceId1")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PersonId");

                    b.HasIndex("TypeServiceId1");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceProviderAirPlanes");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.TypeServiceProviderAirPlane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeServiceProviderAirPlanes");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.RefrenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EntityName")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("RefrenceTypes");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Compartment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("TicketTrainId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TicketTrainId");

                    b.ToTable("Compartments");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.GroupTrainTicketRefundRules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GroupTrainTicketRefundRules");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.RouteTrainStationConnect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("StopThisDestination")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<long>("TrainId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainStationId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TrainTravelId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TrainId");

                    b.HasIndex("TrainStationId");

                    b.HasIndex("TrainTravelId");

                    b.ToTable("RouteTrainStationConnects");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.SeatOrBed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompartmentId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<short>("Location")
                        .HasColumnType("smallint");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CompartmentId");

                    b.ToTable("SeatOrBeds");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.ServiceProviderTrain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<long>("TypeServiceId")
                        .HasColumnType("bigint");

                    b.Property<int>("TypeServiceId1")
                        .HasColumnType("int");

                    b.Property<long?>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CompanyID");

                    b.HasIndex("PersonId");

                    b.HasIndex("TypeServiceId1");

                    b.HasIndex("UserId");

                    b.ToTable("ServiceProviderTrains");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FK_TicketTrains_SeatOrBeds_SeatOrBedId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("PassengerId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<long?>("ReturnedId")
                        .HasColumnType("bigint");

                    b.Property<long?>("TicketTrainReservationId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FK_TicketTrains_SeatOrBeds_SeatOrBedId");

                    b.HasIndex("PassengerId");

                    b.HasIndex("ReturnedId");

                    b.HasIndex("TicketTrainReservationId");

                    b.ToTable("TicketTrains");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrainReservation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FK_TicketTrainReservations_TrainStations_TrainStationDestinationId")
                        .HasColumnType("bigint");

                    b.Property<long>("FK_TicketTrainReservations_TrainStations_TrainStationOriginId")
                        .HasColumnType("bigint");

                    b.Property<long>("FK_TicketTrainReservations_Transactions_TransactionId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsClosedCompartment")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SendOtherInformationToEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SendOtherInformationToPhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TicketNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TrainTravelId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FK_TicketTrainReservations_TrainStations_TrainStationDestinationId");

                    b.HasIndex("FK_TicketTrainReservations_TrainStations_TrainStationOriginId");

                    b.HasIndex("FK_TicketTrainReservations_Transactions_TransactionId");

                    b.HasIndex("TrainTravelId");

                    b.HasIndex("UserId");

                    b.ToTable("TicketTrainReservations");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrainReturned", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ReasonForReturned")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("TransactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TransactionId");

                    b.ToTable("TicketTrainReturneds");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Train", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<int>("CompartmentCount")
                        .HasColumnType("int");

                    b.Property<int>("CompartmentType")
                        .HasColumnType("int");

                    b.Property<string>("CoupeFacilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Default_PricePerPerson")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Default_PricePerPersonForClosedCompartment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralTrainFacilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HaveBed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Trains");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TrainStation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CityId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("TrainStations");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TrainStationConnect", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FK_TrainStationConnects_TrainStations_TrainStationDestinationId")
                        .HasColumnType("bigint");

                    b.Property<long>("FK_TrainStationConnects_TrainStations_TrainStationOriginId")
                        .HasColumnType("bigint");

                    b.Property<TimeSpan>("SpaceBetween")
                        .HasColumnType("time");

                    b.Property<long>("TrainStationDestinationId")
                        .HasColumnType("bigint");

                    b.Property<long>("TrainStationOriginIdId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("FK_TrainStationConnects_TrainStations_TrainStationDestinationId");

                    b.HasIndex("FK_TrainStationConnects_TrainStations_TrainStationOriginId");

                    b.HasIndex("TrainStationOriginIdId");

                    b.ToTable("TrainStationConnects");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TrainTicketRefundRules", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("DeductibleAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<short?>("EndHour")
                        .HasColumnType("smallint");

                    b.Property<TimeSpan?>("End_AfterIssuanceTicket")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("End_BeforeFlight")
                        .HasColumnType("time");

                    b.Property<long?>("GroupTrainTicketRefundRulesId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsPercent")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<short?>("StartHour")
                        .HasColumnType("smallint");

                    b.Property<TimeSpan?>("Start_AfterIssuanceTicket")
                        .HasColumnType("time");

                    b.Property<TimeSpan?>("Start_BeforeFlight")
                        .HasColumnType("time");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GroupTrainTicketRefundRulesId");

                    b.ToTable("TrainTicketRefundRules");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TrainTravel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CoupeFacilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("GeneralTrainFacilities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<decimal>("PricePerPerson")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PricePerPersonForClosedCompartment")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("RefundRulesId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SmallTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TrainId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RefundRulesId");

                    b.HasIndex("TrainId");

                    b.ToTable("TrainTravels");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TypeServiceProviderTrain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TypeServiceProviderTrains");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Users.Passenger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CountryBirthId")
                        .HasColumnType("bigint");

                    b.Property<string>("En_FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("En_LastName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("ExpireDatePassport")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("PassportNumber")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("PassportNumber")
                        .IsUnique()
                        .HasFilter("[PassportNumber] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.HasIndex("UserId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Users.Person", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("EmailAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int?>("Gender")
                        .HasColumnType("int");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("NationalCode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("RemoveTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("People");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            BirthDate = new DateTime(2001, 6, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "Sajadrahaty2@gmail.com",
                            FirstName = "سجاد",
                            Gender = 0,
                            IsRemoved = false,
                            LastName = "راحتی",
                            NationalCode = "1250635658",
                            PhoneNumber = "09339799317"
                        });
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Users.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2L,
                            Name = "Customer"
                        });
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("PersonId")
                        .HasColumnType("bigint");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<long>("WalletId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PersonId");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BusTravelServiceProviderBus", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.BusTravel", null)
                        .WithMany()
                        .HasForeignKey("BusTravelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.ServiceProviderBus", null)
                        .WithMany()
                        .HasForeignKey("ServiceProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FlightServiceProviderAirPlane", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.Flight", null)
                        .WithMany()
                        .HasForeignKey("FlightsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.ServiceProviderAirPlane", null)
                        .WithMany()
                        .HasForeignKey("ServiceProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ServiceProviderTrainTrainTravel", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.TrainTravel", null)
                        .WithMany()
                        .HasForeignKey("BusTravelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.ServiceProviderTrain", null)
                        .WithMany()
                        .HasForeignKey("ServiceProvidersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.Bank", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.City", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Common.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.Image", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.AirPlane", null)
                        .WithMany("Images")
                        .HasForeignKey("AirPlaneId");

                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.Bus", null)
                        .WithMany("Images")
                        .HasForeignKey("BusId");

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.Train", null)
                        .WithMany("Images")
                        .HasForeignKey("TrainId");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Common.State", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Common.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.CartNumbers", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Common.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Discount.Discount", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.RefrenceType", "RefrenceType")
                        .WithMany()
                        .HasForeignKey("RefrenceTypeID");

                    b.Navigation("RefrenceType");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Discount.UsedDiscount", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Financial.Discount.Discount", "Discount")
                        .WithMany("UsedDiscounts")
                        .HasForeignKey("DiscountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Financial.Transaction", "Transaction")
                        .WithMany("Discounts")
                        .HasForeignKey("FK_UsedDiscounts_Transactions_NoCacade")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.RefrenceType", "RefrenceType")
                        .WithMany()
                        .HasForeignKey("RefrenceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Discount");

                    b.Navigation("RefrenceType");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Transaction", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.RefrenceType", "RefrenceType")
                        .WithMany()
                        .HasForeignKey("RefrenceTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Financial.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefrenceType");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Wallet", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Users.User", null)
                        .WithOne("Wallet")
                        .HasForeignKey("Ticket.Domain.Entities.Financial.Wallet", "UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Bus", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.BusType", "BusType")
                        .WithMany()
                        .HasForeignKey("BusTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusType");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.BusTerminal", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Common.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.BusTravel", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.Bus", "Bus")
                        .WithMany("Travels")
                        .HasForeignKey("BusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.BusTravelCompany", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.BusTerminal", "DestinationTerminal")
                        .WithMany()
                        .HasForeignKey("FK_BusTravels_BusTerminals_DestinationTerminalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.BusTerminal", "OriginTerminal")
                        .WithMany()
                        .HasForeignKey("FK_BusTravels_BusTerminals_OriginTerminalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Bus");

                    b.Navigation("Company");

                    b.Navigation("DestinationTerminal");

                    b.Navigation("OriginTerminal");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.ServiceProviderBus", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.References.CompanyServiceProviders", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.TypeServiceProviderBus", "TypeService")
                        .WithMany()
                        .HasForeignKey("TypeServiceId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("Person");

                    b.Navigation("TypeService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Ticket.TicketBus", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Users.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId");

                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.Ticket.TicketBusReservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("ReservationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.Ticket.TicketBusReturned", "Returned")
                        .WithMany()
                        .HasForeignKey("ReturnedId");

                    b.Navigation("Passenger");

                    b.Navigation("Reservation");

                    b.Navigation("Returned");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Ticket.TicketBusReservation", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Bus.BusTravel", "BusTravel")
                        .WithMany("ticketBusReservations")
                        .HasForeignKey("BusTravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.Passenger", "Supervisor")
                        .WithMany("TicketBusReservations")
                        .HasForeignKey("FK_TicketBusReservations_Passengers_SupervisorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Financial.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("FK_TicketBusReservations_Transactions_TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany("TicketBuses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BusTravel");

                    b.Navigation("Supervisor");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Ticket.TicketBusReturned", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Financial.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirLine", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.AirLineCompany", "AirLineCompany")
                        .WithMany("AirLines")
                        .HasForeignKey("AirLineCompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirLineCompany");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirLineContants", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.AirLine", "AirLine")
                        .WithOne("AirLineContants")
                        .HasForeignKey("Ticket.Domain.Entities.Refrences.Flight.AirLineContants", "AirLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirLine");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirLineFinancial", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.AirLine", "AirLine")
                        .WithOne("AirLineFinancial")
                        .HasForeignKey("Ticket.Domain.Entities.Refrences.Flight.AirLineFinancial", "AirLineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Common.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirLine");

                    b.Navigation("Bank");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirPlane", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.AirPlaneType", "AirPlaneType")
                        .WithMany()
                        .HasForeignKey("AirPlaneTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirPlaneType");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirplaneTerminal", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Common.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.DomesticFlight", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.TicketDomesticFlight", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.TicketDomesticFlightReservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("FK_TicketDomesticFlights_TicketDomesticFlightReservations_ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.Passenger", "Passenger")
                        .WithMany("TicketDomesticFlights")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.TicketDomesticFlightReturned", "Returned")
                        .WithMany()
                        .HasForeignKey("ReturnedId");

                    b.Navigation("Passenger");

                    b.Navigation("Reservation");

                    b.Navigation("Returned");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.TicketDomesticFlightReservation", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Financial.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("FK_TicketDomesticFlightReservation_Transactions_TransactionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.DomesticFlight", "Flight")
                        .WithMany("Reservations")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany("TicketDomesticFlights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.TicketDomesticFlightReturned", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Financial.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.Flight", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.AirLine", "AirLine")
                        .WithMany()
                        .HasForeignKey("AirLineId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.AirPlane", "AirPlane")
                        .WithMany("Flights")
                        .HasForeignKey("AirPlaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.FlightClass", "Class")
                        .WithMany()
                        .HasForeignKey("ClassId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.FlightCompany", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Financial.Discount.Discount", "Discount")
                        .WithMany()
                        .HasForeignKey("DiscountId");

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.AirplaneTerminal", "DestinationTerminal")
                        .WithMany()
                        .HasForeignKey("FK_Flights_AirplaneTerminals_DestinationTerminalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.AirplaneTerminal", "OriginTerminal")
                        .WithMany()
                        .HasForeignKey("FK_Flights_AirplaneTerminals_OriginTerminalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Common.Pricing", "Pricing")
                        .WithMany()
                        .HasForeignKey("PricingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.GroupFlightTicketRefundRules", "TicketRefundRules")
                        .WithMany("Flights")
                        .HasForeignKey("TicketRefundRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AirLine");

                    b.Navigation("AirPlane");

                    b.Navigation("Class");

                    b.Navigation("Company");

                    b.Navigation("DestinationTerminal");

                    b.Navigation("Discount");

                    b.Navigation("OriginTerminal");

                    b.Navigation("Pricing");

                    b.Navigation("TicketRefundRules");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.FlightClass", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.FlightClassType", "ClassType")
                        .WithMany()
                        .HasForeignKey("ClassTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClassType");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.FlightTag", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.Flight", null)
                        .WithMany("Tags")
                        .HasForeignKey("FlightId");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.FlightTicketRefundRules", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.GroupFlightTicketRefundRules", "GroupRules")
                        .WithMany("TicketRefundRules")
                        .HasForeignKey("GroupRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GroupRules");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.InternationalFlight", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.Flight", "Flight")
                        .WithMany()
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.TicketInternationalFlight", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.TicketInternationalFlightReservation", "Reservation")
                        .WithMany("Tickets")
                        .HasForeignKey("FK_TicketInternationalFlights_TicketInternationalFlightReservations_ReservationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.Passenger", "Passenger")
                        .WithMany("TicketInternationalFlights")
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.TicketInternationalFlightReturned", "Returned")
                        .WithMany()
                        .HasForeignKey("ReturnedId");

                    b.Navigation("Passenger");

                    b.Navigation("Reservation");

                    b.Navigation("Returned");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.TicketInternationalFlightReservation", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Financial.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("FK_TicketInternationalFlightReservation_Transactions_TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.InternationalFlight", "Flight")
                        .WithMany("Reservations")
                        .HasForeignKey("FlightId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany("TicketInternationalFlights")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Flight");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.TicketInternationalFlightReturned", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Financial.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.ServiceProviderAirPlane", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.References.CompanyServiceProviders", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Flight.TypeServiceProviderAirPlane", "TypeService")
                        .WithMany()
                        .HasForeignKey("TypeServiceId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("Person");

                    b.Navigation("TypeService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Compartment", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrainReservation", "TicketTrain")
                        .WithMany("Compartment")
                        .HasForeignKey("TicketTrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketTrain");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.RouteTrainStationConnect", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.Train", "Train")
                        .WithMany()
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.TrainStationConnect", "TrainStation")
                        .WithMany()
                        .HasForeignKey("TrainStationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.TrainTravel", null)
                        .WithMany("TrainStations")
                        .HasForeignKey("TrainTravelId");

                    b.Navigation("Train");

                    b.Navigation("TrainStation");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.SeatOrBed", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.Compartment", "Compartment")
                        .WithMany()
                        .HasForeignKey("CompartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Compartment");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.ServiceProviderTrain", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.References.CompanyServiceProviders", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.TypeServiceProviderTrain", "TypeService")
                        .WithMany()
                        .HasForeignKey("TypeServiceId1")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Company");

                    b.Navigation("Person");

                    b.Navigation("TypeService");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrain", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.SeatOrBed", "SeatOrBed")
                        .WithMany()
                        .HasForeignKey("FK_TicketTrains_SeatOrBeds_SeatOrBedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.Passenger", "Passenger")
                        .WithMany()
                        .HasForeignKey("PassengerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrainReturned", "Returned")
                        .WithMany()
                        .HasForeignKey("ReturnedId");

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrainReservation", null)
                        .WithMany("TicketTrains")
                        .HasForeignKey("TicketTrainReservationId");

                    b.Navigation("Passenger");

                    b.Navigation("Returned");

                    b.Navigation("SeatOrBed");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrainReservation", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.TrainStation", "TrainStationDestination")
                        .WithMany()
                        .HasForeignKey("FK_TicketTrainReservations_TrainStations_TrainStationDestinationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.TrainStation", "TrainStationOrigin")
                        .WithMany()
                        .HasForeignKey("FK_TicketTrainReservations_TrainStations_TrainStationOriginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Financial.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("FK_TicketTrainReservations_Transactions_TransactionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.TrainTravel", "TrainTravel")
                        .WithMany()
                        .HasForeignKey("TrainTravelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany("TicketTrains")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainStationDestination");

                    b.Navigation("TrainStationOrigin");

                    b.Navigation("TrainTravel");

                    b.Navigation("Transaction");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrainReturned", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Financial.Transaction", "Transaction")
                        .WithMany()
                        .HasForeignKey("TransactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Transaction");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TrainStation", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Common.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TrainStationConnect", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.TrainStation", "TrainStationDestination")
                        .WithMany()
                        .HasForeignKey("FK_TrainStationConnects_TrainStations_TrainStationDestinationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Common.City", "TrainStationOrigin")
                        .WithMany()
                        .HasForeignKey("FK_TrainStationConnects_TrainStations_TrainStationOriginId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.TrainStation", "TrainStationOriginId")
                        .WithMany()
                        .HasForeignKey("TrainStationOriginIdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TrainStationDestination");

                    b.Navigation("TrainStationOrigin");

                    b.Navigation("TrainStationOriginId");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TrainTicketRefundRules", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.GroupTrainTicketRefundRules", null)
                        .WithMany("TicketRefundRules")
                        .HasForeignKey("GroupTrainTicketRefundRulesId");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TrainTravel", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.GroupTrainTicketRefundRules", "RefundRules")
                        .WithMany()
                        .HasForeignKey("RefundRulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Refrences.Train.Train", "Train")
                        .WithMany("TrainRoutes")
                        .HasForeignKey("TrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RefundRules");

                    b.Navigation("Train");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Users.Passenger", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Users.Person", "Person")
                        .WithMany("Passengers")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Ticket.Domain.Entities.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Users.User", b =>
                {
                    b.HasOne("Ticket.Domain.Entities.Users.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Discount.Discount", b =>
                {
                    b.Navigation("UsedDiscounts");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Transaction", b =>
                {
                    b.Navigation("Discounts");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Financial.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Bus", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("Travels");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.BusTravel", b =>
                {
                    b.Navigation("ticketBusReservations");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Bus.Ticket.TicketBusReservation", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirLine", b =>
                {
                    b.Navigation("AirLineContants")
                        .IsRequired();

                    b.Navigation("AirLineFinancial")
                        .IsRequired();
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirLineCompany", b =>
                {
                    b.Navigation("AirLines");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.AirPlane", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("Images");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.DomesticFlight", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.DomesticFlight.TicketDomesticFlightReservation", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.Flight", b =>
                {
                    b.Navigation("Tags");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.GroupFlightTicketRefundRules", b =>
                {
                    b.Navigation("Flights");

                    b.Navigation("TicketRefundRules");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.InternationalFlight", b =>
                {
                    b.Navigation("Reservations");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Flight.InternationalFlight.TicketInternationalFlightReservation", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.GroupTrainTicketRefundRules", b =>
                {
                    b.Navigation("TicketRefundRules");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Ticket.TicketTrainReservation", b =>
                {
                    b.Navigation("Compartment");

                    b.Navigation("TicketTrains");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.Train", b =>
                {
                    b.Navigation("Images");

                    b.Navigation("TrainRoutes");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Refrences.Train.TrainTravel", b =>
                {
                    b.Navigation("TrainStations");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Users.Passenger", b =>
                {
                    b.Navigation("TicketBusReservations");

                    b.Navigation("TicketDomesticFlights");

                    b.Navigation("TicketInternationalFlights");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Users.Person", b =>
                {
                    b.Navigation("Passengers");
                });

            modelBuilder.Entity("Ticket.Domain.Entities.Users.User", b =>
                {
                    b.Navigation("TicketBuses");

                    b.Navigation("TicketDomesticFlights");

                    b.Navigation("TicketInternationalFlights");

                    b.Navigation("TicketTrains");

                    b.Navigation("Wallet")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
